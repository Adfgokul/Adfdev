{
	"name": "dataflowchallengeweb",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "csvforsourceDS",
						"type": "DatasetReference"
					},
					"name": "sourcefromadls"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "sqldbwebDSchicago",
						"type": "DatasetReference"
					},
					"name": "sinkweb"
				}
			],
			"transformations": [
				{
					"name": "derivedColumnweb"
				},
				{
					"name": "aggregateweb"
				},
				{
					"name": "filterforyear"
				}
			],
			"scriptLines": [
				"source(output(",
				"          id as string,",
				"          case_number as string,",
				"          date as timestamp 'yyyy-MM-dd\\'T\\'HH:mm:ss',",
				"          block as string,",
				"          iucr as string,",
				"          primary_type as string,",
				"          description as string,",
				"          location_description as string,",
				"          arrest as string,",
				"          domestic as string,",
				"          beat as string,",
				"          district as string,",
				"          ward as string,",
				"          community_area as string,",
				"          fbi_code as string,",
				"          x_coordinate as string,",
				"          y_coordinate as string,",
				"          year as string,",
				"          updated_on as string,",
				"          latitude as string,",
				"          longitude as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sourcefromadls",
				"sourcefromadls derive(Date = toString(date,'yyyy-MM-dd'),",
				"          time = toString(date, 'HH:mm:ss.sss')) ~> derivedColumnweb",
				"derivedColumnweb aggregate(groupBy(iucr,",
				"          year,",
				"          derivedColumnweb@Date,",
				"          time,",
				"          DayOfWeek = dayOfWeek(sourcefromadls@date)),",
				"     CountOfIUCR = count(iucr)) ~> aggregateweb",
				"aggregateweb filter(year=='2022') ~> filterforyear",
				"filterforyear sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sinkweb"
			]
		}
	}
}